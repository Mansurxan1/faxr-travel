import { NextResponse } from 'next/server';
import crypto from 'crypto';
import fs from 'fs';
import path from 'path';
import { kv } from '@vercel/kv';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
async function saveOrderInfo(orderData) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω-—Å—Ä–µ–¥–µ Vercel
    if (process.env.VERCEL) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Vercel KV Storage
      await kv.set(`order:${orderData.orderId}`, JSON.stringify(orderData));
      console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Vercel KV:', orderData.orderId);
    } else {
      // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const dataDir = path.join(process.cwd(), 'data');
      const ordersDir = path.join(dataDir, 'orders');
      
      if (!fs.existsSync(dataDir)) {
        fs.mkdirSync(dataDir);
      }
      
      if (!fs.existsSync(ordersDir)) {
        fs.mkdirSync(ordersDir);
      }
      
      // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
      const orderFilePath = path.join(ordersDir, `${orderData.orderId}.json`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–∞–π–ª
      fs.writeFileSync(orderFilePath, JSON.stringify(orderData, null, 2));
      
      console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ:', orderFilePath);
    }
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
export async function getOrderInfo(orderId) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ–º –ª–∏ –º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω-—Å—Ä–µ–¥–µ Vercel
    if (process.env.VERCEL) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Vercel KV Storage
      const orderDataStr = await kv.get(`order:${orderId}`);
      if (!orderDataStr) {
        console.error('–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ Vercel KV:', orderId);
        return null;
      }
      return JSON.parse(orderDataStr);
    } else {
      // –õ–æ–∫–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
      // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞
      const orderFilePath = path.join(process.cwd(), 'data', 'orders', `${orderId}.json`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!fs.existsSync(orderFilePath)) {
        console.error('–§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω:', orderFilePath);
        return null;
      }
      
      // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ñ–∞–π–ª–∞
      const orderData = JSON.parse(fs.readFileSync(orderFilePath, 'utf8'));
      
      return orderData;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ:', error);
    return null;
  }
}

export async function POST(request) {
  try {
    const body = await request.json();
    const { tourId, tourName, price, userId, userName, userPhone } = body;

    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', body);

    if (!tourId || !tourName || !price) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', { tourId, tourName, price });
      return NextResponse.json(
        { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' },
        { status: 400 }
      );
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
    const orderId = Date.now().toString();
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const serviceId = process.env.CLICK_SERVICE_ID;
    const merchantId = process.env.CLICK_MERCHANT_ID;
    const merchantUserId = process.env.CLICK_MERCHANT_USER_ID;
    const secretKey = process.env.CLICK_SECRET_KEY;
    const spicCode = process.env.CLICK_SPIC_CODE;
    const packageCode = process.env.CLICK_PACKAGE_CODE;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (!serviceId || !merchantId || !merchantUserId || !secretKey) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:', {
        serviceId: !serviceId,
        merchantId: !merchantId,
        merchantUserId: !merchantUserId,
        secretKey: !secretKey
      });
      return NextResponse.json(
        { error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è' },
        { status: 500 }
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    if (!spicCode || !packageCode) {
      console.warn('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ–∫–æ–≤:', {
        spicCode: !spicCode,
        packageCode: !packageCode
      });
    }
    
    // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    const signTime = Date.now();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É (—É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã)
    const formattedPrice = price.toString().replace(/\s+/g, '');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const signString = `${serviceId}${orderId}${signTime}${secretKey}`;
    const sign = crypto.createHash('md5').update(signString).digest('hex');
    
    console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏:', {
      serviceId,
      orderId,
      signTime,
      formattedPrice,
      // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
      signString: `${serviceId}${orderId}${signTime}[SECRET_KEY]`,
      sign
    });
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    const returnUrl = `/payment/success`;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ö–æ—Å—Ç –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∞–±—Å–æ–ª—é—Ç–Ω–æ–≥–æ URL
    const host = request.headers.get('host') || 'localhost:5174';
    const protocol = host.includes('localhost') ? 'http' : 'https';
    const absoluteReturnUrl = `${protocol}://${host}${returnUrl}`;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    const orderData = {
      orderId,
      tourId,
      tourName,
      price: formattedPrice,
      userId: userId || '–ì–æ—Å—Ç—å',
      userName: userName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      userPhone: userPhone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      status: '–°–æ–∑–¥–∞–Ω',
      createdAt: new Date().toISOString()
    };
    
    await saveOrderInfo(orderData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    await sendTelegramNotification(orderData);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã Click
    const clickUrl = `https://my.click.uz/services/pay?service_id=${serviceId}&merchant_id=${merchantId}&amount=${formattedPrice}&transaction_param=${orderId}&return_url=${encodeURIComponent(absoluteReturnUrl)}&card_type=uzcard&sign_time=${signTime}&sign_string=${sign}`;
    
    // –õ–æ–≥–∏—Ä—É–µ–º URL –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('Click payment URL:', clickUrl);
    
    return NextResponse.json({ 
      success: true, 
      redirectUrl: clickUrl,
      orderId
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(orderData) {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID || '5283151626';
    
    const message = `
üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${orderData.orderId}
üèôÔ∏è –¢—É—Ä: ${orderData.tourName} (ID: ${orderData.tourId})
üí∞ –°—É–º–º–∞: ${orderData.price} —Å—É–º
üë§ –ö–ª–∏–µ–Ω—Ç: ${orderData.userName}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.userPhone}
üîÑ –°—Ç–∞—Ç—É—Å: ${orderData.status}
‚è±Ô∏è –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
    `;
    
    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      }),
    });
    
    const data = await response.json();
    if (!data.ok) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', data);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ–∫–∞
export async function fiscalizeReceipt(paymentData) {
  try {
    const { 
      orderId, 
      tourName, 
      price, 
      userName, 
      userPhone 
    } = paymentData;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const merchantId = process.env.CLICK_MERCHANT_ID;
    const merchantUserId = process.env.CLICK_MERCHANT_USER_ID;
    const serviceId = process.env.CLICK_SERVICE_ID;
    const secretKey = process.env.CLICK_SECRET_KEY;
    const spicCode = process.env.CLICK_SPIC_CODE;
    const packageCode = process.env.CLICK_PACKAGE_CODE;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    if (!merchantId || !merchantUserId || !serviceId || !secretKey || !spicCode || !packageCode) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏:', {
        merchantId: !merchantId,
        merchantUserId: !merchantUserId,
        serviceId: !serviceId,
        secretKey: !secretKey,
        spicCode: !spicCode,
        packageCode: !packageCode
      });
      return { success: false, error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏' };
    }
    
    // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO
    const currentTime = new Date().toISOString();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    const fiscalData = {
      merchant_id: merchantId,
      merchant_user_id: merchantUserId,
      service_id: serviceId,
      transaction_id: orderId,
      receipt_type: 0, // 0 - –ø—Ä–æ–¥–∞–∂–∞, 1 - –≤–æ–∑–≤—Ä–∞—Ç
      receipt_time: currentTime,
      spic_code: spicCode,
      package_code: packageCode,
      items: [
        {
          title: tourName,
          price: parseFloat(price),
          count: 1,
          code: `TOUR-${orderId}`,
          package_code: packageCode,
          vat_percent: 15 // –ù–î–° –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ç–æ–≤–∞—Ä–∞)
        }
      ],
      client_info: {
        name: userName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        phone: userPhone || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
      }
    };
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const signTime = Date.now();
    const signString = `${serviceId}${orderId}${signTime}${secretKey}`;
    const sign = crypto.createHash('md5').update(signString).digest('hex');
    
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—é —á–µ–∫–∞:', {
      ...fiscalData,
      sign_time: signTime,
      sign_string: sign
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—é
    const response = await fetch('https://api.click.uz/v2/merchant/receipt/fiscal', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Auth': `${merchantId}:${merchantUserId}:${signTime}:${sign}`
      },
      body: JSON.stringify(fiscalData)
    });
    
    const responseData = await response.json();
    
    console.log('–û—Ç–≤–µ—Ç –æ—Ç API —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏:', responseData);
    
    if (response.ok && responseData.error === 0) {
      // –ï—Å–ª–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö
      const submitItemsResult = await submitFiscalItems({
        serviceId,
        paymentId: responseData.payment_id || orderId,
        tourName,
        price,
        spicCode,
        packageCode
      });
      
      if (submitItemsResult.success) {
        // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫)
        const fiscalDataResult = await getFiscalData({
          serviceId,
          paymentId: responseData.payment_id || orderId,
          merchantId,
          merchantUserId,
          secretKey
        });
        
        if (fiscalDataResult.success && fiscalDataResult.qrCodeURL) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏—Å–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ–∫
          await submitFiscalQRCode({
            serviceId,
            paymentId: responseData.payment_id || orderId,
            qrcode: fiscalDataResult.qrCodeURL,
            merchantId,
            merchantUserId,
            secretKey
          });
        }
      }
      
      return { 
        success: true, 
        fiscalData: responseData 
      };
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ–∫–∞:', responseData);
      return { 
        success: false, 
        error: responseData.error_note || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ–∫–∞' 
      };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ–∫–∞:', error);
    return { 
      success: false, 
      error: error.message 
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö
async function submitFiscalItems(data) {
  try {
    const { 
      serviceId, 
      paymentId, 
      tourName, 
      price, 
      spicCode, 
      packageCode 
    } = data;
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const merchantId = process.env.CLICK_MERCHANT_ID;
    const merchantUserId = process.env.CLICK_MERCHANT_USER_ID;
    const secretKey = process.env.CLICK_SECRET_KEY;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const signTime = Date.now();
    const signString = `${merchantId}${signTime}${secretKey}`;
    const sign = crypto.createHash('md5').update(signString).digest('hex');
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–Ω—É –≤ —Ç–∏–π–∏–Ω—ã (1 —Å—É–º = 100 —Ç–∏–π–∏–Ω)
    const priceInTiyin = Math.round(parseFloat(price) * 100);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ù–î–° (15%)
    const vatPercent = 15;
    const vatAmount = Math.round(priceInTiyin * vatPercent / 100);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const requestData = {
      service_id: parseInt(serviceId),
      payment_id: paymentId,
      items: [
        {
          Name: tourName,
          SPIC: spicCode,
          PackageCode: packageCode,
          Price: priceInTiyin,
          Amount: 1,
          VAT: vatAmount,
          VATPercent: vatPercent,
          CommissionInfo: {}
        }
      ],
      received_ecash: 0,
      received_cash: 0,
      received_card: priceInTiyin // –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
    };
    
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö:', requestData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch('https://api.click.uz/v2/merchant/payment/ofd_data/submit_items', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Auth': `${merchantId}:${sign}:${signTime}`
      },
      body: JSON.stringify(requestData)
    });
    
    const responseData = await response.json();
    
    console.log('–û—Ç–≤–µ—Ç –æ—Ç API –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö:', responseData);
    
    if (response.ok && responseData.error_code === 0) {
      return { 
        success: true, 
        data: responseData 
      };
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö:', responseData);
      return { 
        success: false, 
        error: responseData.error_note || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö' 
      };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö:', error);
    return { 
      success: false, 
      error: error.message 
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å—Å—ã–ª–∫–∏ –Ω–∞ —á–µ–∫)
async function getFiscalData(data) {
  try {
    const { 
      serviceId, 
      paymentId, 
      merchantId, 
      merchantUserId, 
      secretKey 
    } = data;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const signTime = Date.now();
    const signString = `${merchantId}${signTime}${secretKey}`;
    const sign = crypto.createHash('md5').update(signString).digest('hex');
    
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞:', paymentId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch(`https://api.click.uz/v2/merchant/payment/ofd_data/${serviceId}/${paymentId}`, {
      method: 'GET',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Auth': `${merchantId}:${sign}:${signTime}`
      }
    });
    
    const responseData = await response.json();
    
    console.log('–û—Ç–≤–µ—Ç –æ—Ç API –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', responseData);
    
    if (response.ok && responseData.paymentId) {
      return { 
        success: true, 
        paymentId: responseData.paymentId,
        qrCodeURL: responseData.qrCodeURL
      };
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', responseData);
      return { 
        success: false, 
        error: responseData.error_note || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' 
      };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∏—Å–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    return { 
      success: false, 
      error: error.message 
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–∫–∞
async function submitFiscalQRCode(data) {
  try {
    const { 
      serviceId, 
      paymentId, 
      qrcode, 
      merchantId, 
      merchantUserId, 
      secretKey 
    } = data;
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const signTime = Date.now();
    const signString = `${merchantId}${signTime}${secretKey}`;
    const sign = crypto.createHash('md5').update(signString).digest('hex');
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    const requestData = {
      service_id: parseInt(serviceId),
      payment_id: paymentId,
      qrcode: qrcode
    };
    
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏—Å–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–∫–∞:', requestData);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await fetch('https://api.click.uz/v2/merchant/payment/ofd_data/submit_qrcode', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
        'Auth': `${merchantId}:${sign}:${signTime}`
      },
      body: JSON.stringify(requestData)
    });
    
    const responseData = await response.json();
    
    console.log('–û—Ç–≤–µ—Ç –æ—Ç API –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–∫–∞:', responseData);
    
    if (response.ok && responseData.error_code === 0) {
      return { 
        success: true, 
        data: responseData 
      };
    } else {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏—Å–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–∫–∞:', responseData);
      return { 
        success: false, 
        error: responseData.error_note || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏—Å–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–∫–∞' 
      };
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏—Å–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–µ–∫–∞:', error);
    return { 
      success: false, 
      error: error.message 
    };
  }
} 
import { NextResponse } from 'next/server';
import crypto from 'crypto';
import { fiscalizeReceipt, getOrderInfo } from '../route';

// –ö–æ–¥—ã –æ—à–∏–±–æ–∫ Click
const CLICK_ERROR_CODES = {
  0: '–£—Å–ø–µ—à–Ω–æ',
  1: '–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –æ—Ç CLICK',
  2: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
  3: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
  4: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
  5: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞',
  6: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏',
  7: '–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞',
  8: '–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞',
  9: '–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'
};

export async function POST(request) {
  try {
    const body = await request.json();
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç Click:', body);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const {
      click_trans_id,
      service_id,
      merchant_trans_id,
      merchant_prepare_id,
      amount,
      action,
      error,
      error_note,
      sign_time,
      sign_string
    } = body;
    
    if (!click_trans_id || !service_id || !merchant_trans_id || !amount || !action || !sign_time || !sign_string) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ—Ç Click:', body);
      return NextResponse.json({
        error: -1,
        error_note: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
      }, { status: 400 });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const secretKey = process.env.CLICK_SECRET_KEY;
    
    if (!secretKey) {
      console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
      return NextResponse.json({
        error: -1,
        error_note: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞'
      }, { status: 500 });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞
    const signString = `${click_trans_id}${service_id}${merchant_trans_id}${merchant_prepare_id || ''}${amount}${action}${sign_time}${secretKey}`;
    const expectedSign = crypto.createHash('md5').update(signString).digest('hex');
    
    if (sign_string !== expectedSign) {
      console.error('–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞:', {
        received: sign_string,
        expected: expectedSign
      });
      return NextResponse.json({
        error: -1,
        error_note: '–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞'
      }, { status: 400 });
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
    // 0 - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ (Prepare)
    // 1 - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ (Complete)
    if (action === 0) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const orderInfo = await getOrderInfo(merchant_trans_id);
      
      if (!orderInfo) {
        console.error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', merchant_trans_id);
        return NextResponse.json({
          error: -1,
          error_note: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }, { status: 404 });
      }
      
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞:', merchant_trans_id, orderInfo);
      
      return NextResponse.json({
        click_trans_id,
        merchant_trans_id,
        merchant_prepare_id: merchant_trans_id, // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID
        error: 0,
        error_note: 'Success'
      });
    } else if (action === 1) {
      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
      console.log('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', merchant_trans_id);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const orderInfo = await getOrderInfo(merchant_trans_id);
      
      if (!orderInfo) {
        console.error('–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω:', merchant_trans_id);
        return NextResponse.json({
          error: -1,
          error_note: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }, { status: 404 });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
      orderInfo.status = '–û–ø–ª–∞—á–µ–Ω';
      orderInfo.paidAt = new Date().toISOString();
      orderInfo.clickTransId = click_trans_id;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      await sendTelegramNotification({
        orderId: merchant_trans_id,
        clickTransId: click_trans_id,
        amount,
        tourName: orderInfo.tourName,
        userName: orderInfo.userName,
        userPhone: orderInfo.userPhone,
        status: '–û–ø–ª–∞—á–µ–Ω'
      });
      
      // –§–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è —á–µ–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
      const fiscalResult = await fiscalizeReceipt({
        orderId: merchant_trans_id,
        tourName: orderInfo.tourName,
        price: amount,
        userName: orderInfo.userName,
        userPhone: orderInfo.userPhone
      });
      
      if (!fiscalResult.success) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —á–µ–∫–∞:', fiscalResult.error);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        await sendTelegramNotification({
          orderId: merchant_trans_id,
          clickTransId: click_trans_id,
          amount,
          tourName: orderInfo.tourName,
          userName: orderInfo.userName,
          userPhone: orderInfo.userPhone,
          status: '–û—à–∏–±–∫–∞ —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏',
          error: fiscalResult.error
        });
      } else {
        console.log('–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —Ñ–∏—Å–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', fiscalResult.fiscalData);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ñ–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏–∏
        await sendTelegramNotification({
          orderId: merchant_trans_id,
          clickTransId: click_trans_id,
          amount,
          tourName: orderInfo.tourName,
          userName: orderInfo.userName,
          userPhone: orderInfo.userPhone,
          status: '–§–∏—Å–∫–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω',
          fiscalData: fiscalResult.fiscalData
        });
      }
      
      return NextResponse.json({
        click_trans_id,
        merchant_trans_id,
        merchant_confirm_id: merchant_trans_id, // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID
        error: 0,
        error_note: 'Success'
      });
    } else {
      console.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è:', action);
      return NextResponse.json({
        error: -1,
        error_note: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è'
      }, { status: 400 });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Click:', error);
    return NextResponse.json({
      error: -1,
      error_note: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(paymentData) {
  try {
    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID || '5283151626';
    
    let message = `
üí∞ –ü–ª–∞—Ç–µ–∂ #${paymentData.orderId}
üî¢ Click ID: ${paymentData.clickTransId}
üíµ –°—É–º–º–∞: ${paymentData.amount} —Å—É–º
`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–µ –∏ –∫–ª–∏–µ–Ω—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if (paymentData.tourName) {
      message += `üèôÔ∏è –¢—É—Ä: ${paymentData.tourName}\n`;
    }
    
    if (paymentData.userName) {
      message += `üë§ –ö–ª–∏–µ–Ω—Ç: ${paymentData.userName}\n`;
    }
    
    if (paymentData.userPhone) {
      message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${paymentData.userPhone}\n`;
    }
    
    message += `üîÑ –°—Ç–∞—Ç—É—Å: ${paymentData.status}
‚è±Ô∏è –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}
    `;
    
    if (paymentData.error) {
      message += `\n‚ùå –û—à–∏–±–∫–∞: ${paymentData.error}`;
    }
    
    if (paymentData.fiscalData) {
      message += `\n‚úÖ –§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫: ${paymentData.fiscalData.receipt_id || '–°–æ–∑–¥–∞–Ω'}`;
    }
    
    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML'
      }),
    });
    
    const data = await response.json();
    if (!data.ok) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', data);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
  }
} 